type Activity {
  _id: ID!
  organizer: PublicUser
  isOrganizer: Boolean
  spot: Spot
  sport: Sport
  dateTime: Date
  duration: Int
  title: String
  description: String
  status: ActivityStatus
  capacity: Int
  shareLink: String
  chatkitRoomId: String
  attendeesIds: [ID]
  attendees: [PublicUser]
  isAttendee: Boolean
  distance: Float
  repeatFrequency: Int
}

enum ActivityStatus {
  ACTIVE
  CANCELED
  FINISHED
  DELETED
}

type AuthToken {
  _id: ID!
  token: String!
}

type City {
  _id: ID!
  name: String
  country: String
  formattedAddress: String
  location: Point
}

scalar Date

type DateRange {
  """_id: ID!"""
  startDate: Date
  endDate: Date
}

input DateRangeInput {
  startDate: String!
  endDate: String!
}

enum Gender {
  F
  M
  TBD
}

enum Language {
  en
  es
  nl
}

type Mutation {
  signup(username: String!, email: String!, language: Language!): PrivateUser
  login(email: String!): PrivateUser
  validatePasscode(email: String!, passcode: String!): AuthToken
  updateUser(username: String, gender: String, avatar: String, city: String, country: String, formattedAddress: String, coordinates: [Float]): PrivateUser
  createActivity(sport: Sport!, dateTime: String!, duration: Int, capacity: Int, spotId: ID!, title: String!, description: String, repeatFrequency: Int): Activity
  updateActivity(_id: ID!, dateTime: String!, duration: Int, capacity: Int, spotId: ID!, title: String!, description: String, repeatFrequency: Int): Activity
  cancelActivity(_id: ID!, msg: String): Activity
  addAttendee(_id: ID!): Activity
  removeAttendee(_id: ID!): Activity
  markAsRead: [Notification]
}

type Notification {
  _id: ID!
  createdBy: ID
  createdAt: Date!
  recipientId: ID!
  recipient: PublicUser!
  notificationType: NotificationType!
  link: String!
  didRead: Boolean!
}

enum NotificationType {
  NEW_ACTIVITY
  ACTIVITY_CANCELED
  ACTIVITY_RECREATED
  ATTENDEE_ADDED
  ATTENDEE_REMOVED
}

type Point {
  type: String!
  coordinates: [Float]!
}

type PrivateUser {
  _id: ID!
  createdAt: Date
  email: String
  profile: UserProfile
  formattedAddress: String
  location: Point
}

type PublicUser {
  _id: ID!
  profile: UserProfile
}

type Query {
  privateUser: PrivateUser
  publicUser(_id: ID!): PublicUser
  publicUsers(_ids: [ID!]): [PublicUser]
  cities: [City]
  spots(sports: [Sport], distance: Float, limit: Int!, offset: Int!): [Spot]
  spotDetails(_id: ID!): Spot
  activities(sports: [Sport], distance: Float, limit: Int!, offset: Int!): [Activity]
  activityDetails(_id: ID!): Activity
  notifications(limit: Int!, offset: Int!): [Notification]
}

enum RespondentStatus {
  ATTENDING
  DECLINED
}

enum Sport {
  FOOTBALL
  VOLLEYBALL
  BEACH_VOLLEYBALL
  TENNIS
  TABLE_TENNIS
  ABSOLUTE_FRISBEE
  BASKETBALL
  BADMINTON
}

type Spot {
  _id: ID!
  spotname: String
  address: String
  location: Point
  images: [String]
  sports: [Sport]
  distance: Float
  activities(limit: Int!, offset: Int!): [Activity]
}

type UserProfile {
  _id: ID!
  username: String
  avatar: String
  birthdate: Date
  gender: Gender
  language: Language
  city: String
  country: String
}

